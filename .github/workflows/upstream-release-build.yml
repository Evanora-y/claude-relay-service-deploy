name: Build & Push evanora/claude-code-relay

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: "可选：指定上游 Release 标签（留空=latest）"
        required: false
        type: string
        default: ""

jobs:
  build-and-push:
    name: Build & Push
    runs-on: ubuntu-latest
    permissions:
      contents: read

    env:
      UPSTREAM_OWNER: Wei-Shaw
      UPSTREAM_REPO: claude-relay-service
      DOCKERHUB_REPO: evanora/claude-code-relay
      OVERLAY_DIR: overlays/default

    steps:
      - name: Checkout repository (for overlays/scripts)
        uses: actions/checkout@v4

      # 先不启用缓存，避免根目录无 lockfile 报错
      - name: Setup Node.js 18 (no cache yet)
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install system deps
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq unzip rsync perl
          npm i -g pnpm@8 yarn

      # ---- Docker Hub 密钥自检（提前失败，避免到最后才提示） ----
      - name: Assert Docker Hub credentials exist
        run: |
          set -e
          if [ -z "${{ secrets.DOCKERHUB_USERNAME }}" ] || [ -z "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
            echo "::error::Docker Hub credentials missing. Please set DOCKERHUB_USERNAME and DOCKERHUB_TOKEN in Settings → Secrets and variables → Actions."
            exit 1
          fi
          echo "Docker Hub credentials are present."

      # ---------- 获取上游 Release 元数据 ----------
      - name: Resolve release
        id: rel
        env:
          TAG: ${{ inputs.release_tag }}
        run: |
          set -euo pipefail
          if [ -n "$TAG" ]; then
            API="https://api.github.com/repos/${UPSTREAM_OWNER}/${UPSTREAM_REPO}/releases/tags/${TAG}"
          else
            API="https://api.github.com/repos/${UPSTREAM_OWNER}/${UPSTREAM_REPO}/releases/latest"
          fi
          curl -sS -L "$API" -o release.json
          TAG_NAME=$(jq -r .tag_name release.json)
          echo "tag=$TAG_NAME" >> "$GITHUB_OUTPUT"
          # 使用源码 tarball（稳定）
          TARBALL=$(jq -r .tarball_url release.json)
          echo "download_url=$TARBALL" >> "$GITHUB_OUTPUT"

      # ---------- 下载并解压 ----------
      - name: Download & extract
        id: ext
        run: |
          set -euo pipefail
          mkdir -p downloads work/src
          URL="${{ steps.rel.outputs.download_url }}"
          FILE="downloads/src.tgz"
          echo "Downloading: $URL"
          curl -L -sS "$URL" -o "$FILE"
          tar -xzf "$FILE" -C work/src
          # 识别解压顶层目录
          ROOT="work/src"
          EXTRACTED=$(find "$ROOT" -mindepth 1 -maxdepth 1 -type d | head -n1)
          echo "extracted_dir=$EXTRACTED" >> "$GITHUB_OUTPUT"
          echo "Extracted dir: $EXTRACTED"

      # ---------- 覆盖（你的 TutorialView.vue 等） ----------
      - name: Apply overlay (complete replacements)
        run: |
          set -euo pipefail
          if [ -d "${OVERLAY_DIR}" ]; then
            echo "Overlay: ${OVERLAY_DIR} -> ${{ steps.ext.outputs.extracted_dir }}"
            rsync -a "${OVERLAY_DIR}/" "${{ steps.ext.outputs.extracted_dir }}/"
          else
            echo "No overlay dir found: ${OVERLAY_DIR} (skip)"
          fi

      # ---------- 注释 ApiStatsView.vue 的 <router-link> 整段 ----------
      - name: Patch ApiStatsView.vue (comment <router-link> block)
        run: |
          set -euo pipefail
          TARGET="${{ steps.ext.outputs.extracted_dir }}/web/admin-spa/src/views/ApiStatsView.vue"
          if [ -f "$TARGET" ]; then
            perl -0777 -pe 's#<router-link[\s\S]*?</router-link>#<!-- $& -->#g' -i "$TARGET"
            echo "Patched: $TARGET"
          else
            echo "WARN: $TARGET 不存在，跳过"
          fi

      # ---------- 在 CI 中放宽 ESLint（含 .vue + .js/.ts） ----------
      - name: Relax ESLint rules for CI (no-console/no-debugger in .vue & .js/.ts)
        run: |
          set -euo pipefail
          APP="${{ steps.ext.outputs.extracted_dir }}/web/admin-spa"
          SRC="$APP/src"
          if [ ! -d "$SRC" ]; then
            echo "Skip: $SRC not found"
            exit 0
          fi

          echo "Scanning for console/debugger..."
          # 1) 处理 .vue：在 <script> 后插入禁用注释
          mapfile -t VUE_FILES < <(grep -RIl --include="*.vue" -E 'console\.[a-zA-Z]+|[^a-zA-Z]debugger[^a-zA-Z]' "$SRC" || true)
          for f in "${VUE_FILES[@]}"; do
            perl -0777 -pe 'BEGIN{$/=undef}
              s!(<script[^>]*>)!$1\n/* eslint-disable no-console, no-debugger */!s if $_ !~ m!eslint-disable no-console!;
            ' -i "$f"
          done

          # 2) 处理 .js/.ts：文件首行注入禁用注释（若未注入过）
          mapfile -t JS_TS_FILES < <(grep -RIl --include="*.js" --include="*.ts" -E 'console\.[a-zA-Z]+|[^a-zA-Z]debugger[^a-zA-Z]' "$SRC" || true)
          for f in "${JS_TS_FILES[@]}"; do
            if ! head -n 1 "$f" | grep -q 'eslint-disable no-console'; then
              tmp="$(mktemp)"
              printf "/* eslint-disable no-console, no-debugger */\n" > "$tmp"
              cat "$f" >> "$tmp"
              mv "$tmp" "$f"
            fi
          done

          echo "Patched .vue files:"
          printf ' - %s\n' "${VUE_FILES[@]}" || true
          echo "Patched .js/.ts files:"
          printf ' - %s\n' "${JS_TS_FILES[@]}" || true

      # ---------- 自动探测包管理器与锁文件，并启用缓存 ----------
      - name: Detect package manager & lockfile
        id: pm
        run: |
          set -euo pipefail
          APP="${{ steps.ext.outputs.extracted_dir }}/web/admin-spa"
          if [ -f "$APP/pnpm-lock.yaml" ]; then
            echo "pm=pnpm" >> "$GITHUB_OUTPUT"
            echo "lockfile=$APP/pnpm-lock.yaml" >> "$GITHUB_OUTPUT"
          elif [ -f "$APP/yarn.lock" ]; then
            echo "pm=yarn" >> "$GITHUB_OUTPUT"
            echo "lockfile=$APP/yarn.lock" >> "$GITHUB_OUTPUT"
          elif [ -f "$APP/package-lock.json" ]; then
            echo "pm=npm" >> "$GITHUB_OUTPUT"
            echo "lockfile=$APP/package-lock.json" >> "$GITHUB_OUTPUT"
          elif [ -f "$APP/npm-shrinkwrap.json" ]; then
            echo "pm=npm" >> "$GITHUB_OUTPUT"
            echo "lockfile=$APP/npm-shrinkwrap.json" >> "$GITHUB_OUTPUT"
          else
            echo "pm=npm" >> "$GITHUB_OUTPUT"
            echo "lockfile=" >> "$GITHUB_OUTPUT"
          fi

      - name: Enable cache for setup-node (optional)
        if: ${{ steps.pm.outputs.lockfile != '' }}
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: ${{ steps.pm.outputs.pm }} # npm / yarn / pnpm
          cache-dependency-path: ${{ steps.pm.outputs.lockfile }}

      # ---------- 前端构建 ----------
      - name: Build frontend
        working-directory: ${{ steps.ext.outputs.extracted_dir }}/web/admin-spa
        run: |
          set -euo pipefail
          PM="${{ steps.pm.outputs.pm }}"
          echo "Using PM: $PM"
          case "$PM" in
            pnpm)
              [ -f pnpm-lock.yaml ] && pnpm install --frozen-lockfile || pnpm install
              pnpm build || npm run build || yarn build
              ;;
            yarn)
              [ -f yarn.lock ] && yarn install --frozen-lockfile || yarn install
              yarn build || npm run build
              ;;
            npm|*)
              if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
                npm ci || npm install
              else
                npm install
              fi
              npm run build || yarn build
              ;;
          esac

      # ---------- Docker ----------
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push Docker (amd64)
        uses: docker/build-push-action@v6
        with:
          context: ${{ steps.ext.outputs.extracted_dir }}
          file: ${{ steps.ext.outputs.extracted_dir }}/Dockerfile
          push: true
          platforms: linux/amd64
          tags: |
            ${{ env.DOCKERHUB_REPO }}:${{ steps.rel.outputs.tag }}
            ${{ env.DOCKERHUB_REPO }}:latest

      - name: Summary
        run: |
          echo "✅ Pushed:"
          echo " - ${{ env.DOCKERHUB_REPO }}:${{ steps.rel.outputs.tag }}"
          echo " - ${{ env.DOCKERHUB_REPO }}:latest"
